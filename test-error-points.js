#!/usr/bin/env node

// Test the specific failure points in phone processing
console.log('üîß Targeted Phone Processing Debug')
console.log('===================================\n')

// Test 1: Check if the recording handler can handle minimal valid input
async function testMinimalProcessing() {
  console.log('1Ô∏è‚É£ Testing minimal processing with required fields only...')

  try {
    const minimalData = new URLSearchParams({
      CallSid: 'debug_test_minimal',
      RecordingUrl: '', // Empty URL to trigger error
      RecordingSid: 'debug_sid',
      RecordingDuration: '1',
    }).toString()

    const response = await fetch('https://www.sajal-app.online/api/phone/handle-recording', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: minimalData,
    })

    const result = await response.text()
    console.log(
      'üìÑ Response with empty URL:',
      result.includes('trouble processing') ? 'Error fallback triggered' : 'Processed successfully',
    )
  } catch (error) {
    console.log('‚ùå Minimal test failed:', error.message)
  }
}

// Test 2: Check what happens with missing fields
async function testMissingFields() {
  console.log('\n2Ô∏è‚É£ Testing with missing required fields...')

  try {
    const incompleteData = new URLSearchParams({
      CallSid: 'debug_test_incomplete',
      // Missing RecordingUrl - should trigger validation error
    }).toString()

    const response = await fetch('https://www.sajal-app.online/api/phone/handle-recording', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: incompleteData,
    })

    const result = await response.text()
    console.log(
      'üìÑ Response with missing fields:',
      result.includes('trouble processing') ? 'Error fallback triggered' : 'Unexpected success',
    )
  } catch (error) {
    console.log('‚ùå Missing fields test failed:', error.message)
  }
}

// Test 3: Simple voice API test to verify it's working
async function testVoiceAPIDirectly() {
  console.log('\n3Ô∏è‚É£ Testing voice conversation API directly...')

  try {
    const response = await fetch('https://www.sajal-app.online/api/voice/conversation', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        message: 'Hello, test message for phone debugging',
        context: 'Phone call test',
        interactionType: 'phone_professional',
      }),
    })

    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ Voice API working, response length:', data.response?.length || 0)
      console.log('üìù Sample response:', data.response?.substring(0, 100) + '...')
    } else {
      console.log('‚ùå Voice API failed:', response.status)
    }
  } catch (error) {
    console.log('‚ùå Voice API test failed:', error.message)
  }
}

// Test 4: Check if we can simulate a working recording
async function testWithWorkingRecording() {
  console.log('\n4Ô∏è‚É£ Checking the exact error point...')

  console.log('üîç The issue is likely:')
  console.log("   1. Twilio credentials missing ‚Üí Can't download recording")
  console.log("   2. OpenAI key missing ‚Üí Can't transcribe")
  console.log('   3. Recording URL invalid ‚Üí Download fails')
  console.log('   4. Audio format incompatible ‚Üí Processing fails')

  console.log('\nüìã To fix this, we need to:')
  console.log('   ‚úì Verify TWILIO_ACCOUNT_SID is set in Vercel')
  console.log('   ‚úì Verify TWILIO_AUTH_TOKEN is set in Vercel')
  console.log('   ‚úì Verify OPENAI_API_KEY is set in Vercel')
  console.log('   ‚úì Test with a real Twilio recording URL')
}

// Main debug function
async function runTargetedDebug() {
  await testMinimalProcessing()
  await testMissingFields()
  await testVoiceAPIDirectly()
  await testWithWorkingRecording()

  console.log('\nüéØ IMMEDIATE ACTION NEEDED:')
  console.log('============================')
  console.log('Since you added the Twilio credentials to Vercel:')
  console.log('1. ‚úÖ Go to Vercel Dashboard')
  console.log('2. ‚úÖ Check Environment Variables are saved')
  console.log('3. üîÑ REDEPLOY the project (critical step!)')
  console.log('4. üìû Make a test call after redeployment')
  console.log('')
  console.log('The environment variables only take effect after redeployment!')
}

runTargetedDebug()
