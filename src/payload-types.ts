/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    users: User;
    'portfolio-content': PortfolioContent;
    'chat-analytics': ChatAnalytic;
    'system-logs': SystemLog;
    'content-chunks': ContentChunk;
    'embedding-operations': EmbeddingOperation;
    'database-operations': DatabaseOperation;
    'audit-logs': AuditLog;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'portfolio-content': PortfolioContentSelect<false> | PortfolioContentSelect<true>;
    'chat-analytics': ChatAnalyticsSelect<false> | ChatAnalyticsSelect<true>;
    'system-logs': SystemLogsSelect<false> | SystemLogsSelect<true>;
    'content-chunks': ContentChunksSelect<false> | ContentChunksSelect<true>;
    'embedding-operations': EmbeddingOperationsSelect<false> | EmbeddingOperationsSelect<true>;
    'database-operations': DatabaseOperationsSelect<false> | DatabaseOperationsSelect<true>;
    'audit-logs': AuditLogsSelect<false> | AuditLogsSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: number | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
          id?: string | null;
        }[]
      | null;
    media?: (number | null) | Media;
  };
  layout: (CallToActionBlock | ContentBlock | MediaBlock | ArchiveBlock | FormBlock)[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  title: string;
  heroImage?: (number | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (number | Post)[] | null;
  categories?: (number | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | Category;
  breadcrumbs?:
    | {
        doc?: (number | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (number | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: number | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: number | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage all portfolio content including personal info, experience, skills, and projects
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "portfolio-content".
 */
export interface PortfolioContent {
  id: number;
  /**
   * Title for this content section
   */
  title: string;
  /**
   * Which section of the portfolio this content belongs to
   */
  section: 'personal' | 'about' | 'experience' | 'skills' | 'projects' | 'education' | 'achievements' | 'contact';
  /**
   * Whether this content is currently active on the portfolio
   */
  isActive?: boolean | null;
  /**
   * Display order (higher numbers appear first)
   */
  priority?: number | null;
  content?: {
    personalInfo?: {
      fullName: string;
      title: string;
      tagline?: string | null;
      location?: string | null;
      email?: string | null;
      phone?: string | null;
      website?: string | null;
      profileImage?: (number | null) | Media;
    };
    aboutMe?: {
      summary: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      highlights?:
        | {
            highlight: string;
            id?: string | null;
          }[]
        | null;
    };
    experience?: {
      position: string;
      company: string;
      companyUrl?: string | null;
      location?: string | null;
      startDate: string;
      endDate?: string | null;
      current?: boolean | null;
      description: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      achievements?:
        | {
            achievement: string;
            id?: string | null;
          }[]
        | null;
      technologies?:
        | {
            technology: string;
            id?: string | null;
          }[]
        | null;
    };
    skills?: {
      category: string;
      skillList: {
        name: string;
        level?: ('beginner' | 'intermediate' | 'advanced' | 'expert') | null;
        yearsOfExperience?: number | null;
        id?: string | null;
      }[];
    };
    project?: {
      name: string;
      description: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      shortDescription?: string | null;
      technologies: {
        technology: string;
        id?: string | null;
      }[];
      projectUrl?: string | null;
      githubUrl?: string | null;
      demoUrl?: string | null;
      images?:
        | {
            image: number | Media;
            caption?: string | null;
            id?: string | null;
          }[]
        | null;
      featured?: boolean | null;
      startDate?: string | null;
      endDate?: string | null;
      status?: ('completed' | 'in-progress' | 'on-hold' | 'planned') | null;
    };
    education?: {
      institution: string;
      degree: string;
      field?: string | null;
      startDate: string;
      endDate?: string | null;
      current?: boolean | null;
      gpa?: string | null;
      honors?:
        | {
            honor: string;
            id?: string | null;
          }[]
        | null;
      description?: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
    };
    achievement?: {
      title: string;
      description: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      date: string;
      organization?: string | null;
      certificateUrl?: string | null;
      image?: (number | null) | Media;
    };
    contact?: {
      socialLinks?:
        | {
            platform: 'linkedin' | 'github' | 'twitter' | 'instagram' | 'facebook' | 'youtube' | 'portfolio' | 'other';
            url: string;
            username?: string | null;
            id?: string | null;
          }[]
        | null;
      availableForWork?: boolean | null;
      preferredContactMethod?: ('email' | 'linkedin' | 'phone') | null;
    };
  };
  metadata?: {
    /**
     * Keywords for AI chat system to better match user queries
     */
    keywords?:
      | {
          keyword: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Additional context for AI chat responses related to this content
     */
    chatContext?: string | null;
    /**
     * When embeddings were last generated for this content
     */
    lastEmbeddingUpdate?: string | null;
    /**
     * Vector database embedding ID
     */
    embeddingId?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * System analytics and performance metrics for the AI chat system
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chat-analytics".
 */
export interface ChatAnalytic {
  id: number;
  metricType:
    | 'total_conversations'
    | 'total_messages'
    | 'daily_active_users'
    | 'avg_session_duration'
    | 'messages_per_session'
    | 'user_satisfaction'
    | 'response_accuracy'
    | 'db_connection_status'
    | 'api_response_time'
    | 'error_rate'
    | 'storage_usage'
    | 'memory_usage'
    | 'cpu_usage'
    | 'vector_search_time'
    | 'embedding_generation_time'
    | 'vector_db_size'
    | 'search_success_rate'
    | 'most_retrieved_content'
    | 'content_hit_rate'
    | 'popular_topics'
    | 'search_query_success';
  /**
   * Metric value (can be number, string, or complex object)
   */
  value:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  timestamp: string;
  period: 'realtime' | 'hourly' | 'daily' | 'weekly' | 'monthly';
  metadata?: {
    /**
     * Source of the metric (e.g., chat-api, database, system)
     */
    source?: string | null;
    /**
     * User ID if metric is user-specific
     */
    userId?: string | null;
    /**
     * Session ID if metric is session-specific
     */
    sessionId?: string | null;
    /**
     * Any additional metadata for the metric
     */
    additionalData?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  /**
   * Tags for filtering and categorizing metrics
   */
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Real-time system logs and operational data
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "system-logs".
 */
export interface SystemLog {
  id: number;
  level: 'info' | 'warning' | 'error' | 'debug' | 'critical';
  message: string;
  source: 'chat-api' | 'database' | 'vector-db' | 'auth' | 'filesystem' | 'external-api' | 'admin-ops' | 'system';
  /**
   * Detailed log information (error stack, request data, etc.)
   */
  details?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * User ID if log is related to a specific user action
   */
  userId?: string | null;
  /**
   * Request ID for tracking related operations
   */
  requestId?: string | null;
  /**
   * IP address of the request
   */
  ipAddress?: string | null;
  /**
   * User agent string
   */
  userAgent?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage AI content chunks with metadata and vector embeddings
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "content-chunks".
 */
export interface ContentChunk {
  id: number;
  /**
   * Descriptive title for this content chunk
   */
  title: string;
  /**
   * The actual content text that gets embedded and searched
   */
  content: string;
  source:
    | 'portfolio_data'
    | 'experience'
    | 'skills'
    | 'projects'
    | 'education'
    | 'achievements'
    | 'about_me'
    | 'contact_info'
    | 'custom'
    | 'faq';
  chunkType: 'informational' | 'conversational' | 'technical' | 'personal' | 'professional' | 'faq_answer';
  /**
   * Keywords that should trigger this content in chat responses
   */
  keywords: {
    keyword: string;
    id?: string | null;
  }[];
  /**
   * Priority for search results (1 = lowest, 10 = highest)
   */
  priority?: number | null;
  /**
   * Whether this chunk should be used in chat responses
   */
  isActive?: boolean | null;
  embedding?: {
    /**
     * Vector database ID for this content
     */
    vectorId?: string | null;
    /**
     * When embedding was last generated/updated
     */
    lastEmbeddingUpdate?: string | null;
    /**
     * AI model used for embedding generation
     */
    embeddingModel?: string | null;
    /**
     * Number of dimensions in the embedding vector
     */
    embeddingDimensions?: number | null;
    /**
     * Minimum similarity score for this chunk to be relevant
     */
    similarityThreshold?: number | null;
  };
  usage?: {
    /**
     * Number of times this chunk has been retrieved
     */
    retrievalCount?: number | null;
    /**
     * When this chunk was last used in a response
     */
    lastRetrieved?: string | null;
    /**
     * Average similarity score when retrieved
     */
    avgSimilarityScore?: number | null;
    /**
     * User feedback on this content chunk
     */
    userFeedback?:
      | {
          userId?: string | null;
          rating?: ('helpful' | 'somewhat_helpful' | 'not_helpful') | null;
          comment?: string | null;
          timestamp?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  metadata?: {
    /**
     * URL or reference to original source (if applicable)
     */
    sourceUrl?: string | null;
    /**
     * Additional tags for categorization
     */
    tags?:
      | {
          tag: string;
          id?: string | null;
        }[]
      | null;
    language?: ('en' | 'es' | 'fr' | 'de') | null;
    /**
     * Character length of the content
     */
    contentLength?: number | null;
    /**
     * Word count of the content
     */
    wordCount?: number | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Track and manage vector database embedding operations
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "embedding-operations".
 */
export interface EmbeddingOperation {
  id: number;
  operationType:
    | 'generate_all'
    | 'update_single'
    | 'bulk_regeneration'
    | 'delete_embeddings'
    | 'vector_sync'
    | 'embedding_migration'
    | 'search_test'
    | 'quality_assessment';
  status: 'pending' | 'in_progress' | 'completed' | 'failed' | 'cancelled' | 'partial';
  startedAt?: string | null;
  completedAt?: string | null;
  progress?: {
    totalItems?: number | null;
    processedItems?: number | null;
    failedItems?: number | null;
    percentage?: number | null;
  };
  configuration?: {
    embeddingModel?:
      | (
          | 'text-embedding-ada-002'
          | 'text-embedding-3-small'
          | 'text-embedding-3-large'
          | 'sentence-transformers'
          | 'custom'
        )
      | null;
    batchSize?: number | null;
    maxRetries?: number | null;
    /**
     * Timeout in seconds
     */
    timeout?: number | null;
  };
  targetContent?: {
    contentType?: ('all' | 'content_chunks' | 'portfolio_content' | 'messages' | 'specific_ids') | null;
    /**
     * Specific content IDs to process
     */
    contentIds?:
      | {
          id: string;
        }[]
      | null;
    /**
     * Additional filters for content selection
     */
    filters?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  results?: {
    successfulOperations?:
      | {
          contentId?: string | null;
          vectorId?: string | null;
          /**
           * Processing time in milliseconds
           */
          processingTime?: number | null;
          id?: string | null;
        }[]
      | null;
    failedOperations?:
      | {
          contentId?: string | null;
          error?: string | null;
          attemptCount?: number | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Performance metrics and statistics
     */
    performanceMetrics?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  /**
   * Operation logs and messages
   */
  logs?:
    | {
        timestamp: string;
        level?: ('info' | 'warning' | 'error' | 'debug') | null;
        message: string;
        details?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * User who initiated this operation
   */
  initiatedBy?: (number | null) | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * Track and manage database operations, queries, and maintenance tasks
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "database-operations".
 */
export interface DatabaseOperation {
  id: number;
  operationType:
    | 'select'
    | 'insert'
    | 'update'
    | 'delete'
    | 'backup'
    | 'restore'
    | 'migration'
    | 'create_index'
    | 'analyze'
    | 'cleanup'
    | 'maintenance';
  status: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';
  /**
   * SQL query or command executed
   */
  sqlQuery?: string | null;
  /**
   * Query parameters or operation configuration
   */
  parameters?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  executedAt?: string | null;
  completedAt?: string | null;
  /**
   * Execution duration in milliseconds
   */
  duration?: number | null;
  results?: {
    /**
     * Number of rows affected by the operation
     */
    rowsAffected?: number | null;
    /**
     * Query results or operation output
     */
    resultData?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    /**
     * Performance metrics and statistics
     */
    performanceMetrics?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  error?: {
    errorCode?: string | null;
    errorMessage?: string | null;
    stackTrace?: string | null;
  };
  metadata?: {
    database?: string | null;
    table?: string | null;
    operationSource?: ('admin_panel' | 'api_request' | 'scheduled_job' | 'migration_script' | 'manual_query') | null;
    /**
     * Request ID for tracing related operations
     */
    requestId?: string | null;
    /**
     * Admin session ID
     */
    sessionId?: string | null;
  };
  /**
   * User who executed this operation
   */
  executedBy?: (number | null) | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * Track all admin actions and system changes for security auditing
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "audit-logs".
 */
export interface AuditLog {
  id: number;
  action:
    | 'content_created'
    | 'content_updated'
    | 'content_deleted'
    | 'content_published'
    | 'content_unpublished'
    | 'embeddings_generated'
    | 'embeddings_updated'
    | 'embeddings_deleted'
    | 'vector_search'
    | 'db_query'
    | 'db_backup'
    | 'db_restore'
    | 'db_migration'
    | 'user_login'
    | 'user_logout'
    | 'user_created'
    | 'user_updated'
    | 'user_deleted'
    | 'password_changed'
    | 'role_changed'
    | 'failed_login'
    | 'account_locked'
    | 'account_unlocked'
    | 'security_changed'
    | 'api_key_generated'
    | 'api_key_revoked'
    | 'system_config'
    | 'cache_cleared'
    | 'maintenance_enabled'
    | 'maintenance_disabled';
  /**
   * User who performed the action
   */
  user?: (number | null) | User;
  resource?: {
    type?: ('portfolio-content' | 'content-chunks' | 'messages' | 'users' | 'system' | 'database' | 'api') | null;
    /**
     * ID of the resource that was affected
     */
    id?: string | null;
    /**
     * Human-readable identifier for the resource
     */
    title?: string | null;
  };
  details?: {
    /**
     * Before/after values for updates, or relevant operation details
     */
    changes?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    /**
     * Optional reason or comment for the action
     */
    reason?: string | null;
    /**
     * Additional context or metadata about the action
     */
    metadata?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  request?: {
    /**
     * IP address of the request
     */
    ip?: string | null;
    /**
     * User agent string
     */
    userAgent?: string | null;
    method?: ('GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE') | null;
    /**
     * API endpoint or admin URL
     */
    endpoint?: string | null;
    /**
     * Session identifier
     */
    sessionId?: string | null;
  };
  /**
   * Security/operational severity of the action
   */
  severity: 'low' | 'medium' | 'high' | 'critical';
  status: 'success' | 'failed' | 'partial' | 'warning';
  timestamp: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: number | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (number | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        categoryID?: string | null;
        title?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'portfolio-content';
        value: number | PortfolioContent;
      } | null)
    | ({
        relationTo: 'chat-analytics';
        value: number | ChatAnalytic;
      } | null)
    | ({
        relationTo: 'system-logs';
        value: number | SystemLog;
      } | null)
    | ({
        relationTo: 'content-chunks';
        value: number | ContentChunk;
      } | null)
    | ({
        relationTo: 'embedding-operations';
        value: number | EmbeddingOperation;
      } | null)
    | ({
        relationTo: 'database-operations';
        value: number | DatabaseOperation;
      } | null)
    | ({
        relationTo: 'audit-logs';
        value: number | AuditLog;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        richText?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        media?: T;
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "portfolio-content_select".
 */
export interface PortfolioContentSelect<T extends boolean = true> {
  title?: T;
  section?: T;
  isActive?: T;
  priority?: T;
  content?:
    | T
    | {
        personalInfo?:
          | T
          | {
              fullName?: T;
              title?: T;
              tagline?: T;
              location?: T;
              email?: T;
              phone?: T;
              website?: T;
              profileImage?: T;
            };
        aboutMe?:
          | T
          | {
              summary?: T;
              highlights?:
                | T
                | {
                    highlight?: T;
                    id?: T;
                  };
            };
        experience?:
          | T
          | {
              position?: T;
              company?: T;
              companyUrl?: T;
              location?: T;
              startDate?: T;
              endDate?: T;
              current?: T;
              description?: T;
              achievements?:
                | T
                | {
                    achievement?: T;
                    id?: T;
                  };
              technologies?:
                | T
                | {
                    technology?: T;
                    id?: T;
                  };
            };
        skills?:
          | T
          | {
              category?: T;
              skillList?:
                | T
                | {
                    name?: T;
                    level?: T;
                    yearsOfExperience?: T;
                    id?: T;
                  };
            };
        project?:
          | T
          | {
              name?: T;
              description?: T;
              shortDescription?: T;
              technologies?:
                | T
                | {
                    technology?: T;
                    id?: T;
                  };
              projectUrl?: T;
              githubUrl?: T;
              demoUrl?: T;
              images?:
                | T
                | {
                    image?: T;
                    caption?: T;
                    id?: T;
                  };
              featured?: T;
              startDate?: T;
              endDate?: T;
              status?: T;
            };
        education?:
          | T
          | {
              institution?: T;
              degree?: T;
              field?: T;
              startDate?: T;
              endDate?: T;
              current?: T;
              gpa?: T;
              honors?:
                | T
                | {
                    honor?: T;
                    id?: T;
                  };
              description?: T;
            };
        achievement?:
          | T
          | {
              title?: T;
              description?: T;
              date?: T;
              organization?: T;
              certificateUrl?: T;
              image?: T;
            };
        contact?:
          | T
          | {
              socialLinks?:
                | T
                | {
                    platform?: T;
                    url?: T;
                    username?: T;
                    id?: T;
                  };
              availableForWork?: T;
              preferredContactMethod?: T;
            };
      };
  metadata?:
    | T
    | {
        keywords?:
          | T
          | {
              keyword?: T;
              id?: T;
            };
        chatContext?: T;
        lastEmbeddingUpdate?: T;
        embeddingId?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chat-analytics_select".
 */
export interface ChatAnalyticsSelect<T extends boolean = true> {
  metricType?: T;
  value?: T;
  timestamp?: T;
  period?: T;
  metadata?:
    | T
    | {
        source?: T;
        userId?: T;
        sessionId?: T;
        additionalData?: T;
      };
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "system-logs_select".
 */
export interface SystemLogsSelect<T extends boolean = true> {
  level?: T;
  message?: T;
  source?: T;
  details?: T;
  userId?: T;
  requestId?: T;
  ipAddress?: T;
  userAgent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "content-chunks_select".
 */
export interface ContentChunksSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  source?: T;
  chunkType?: T;
  keywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  priority?: T;
  isActive?: T;
  embedding?:
    | T
    | {
        vectorId?: T;
        lastEmbeddingUpdate?: T;
        embeddingModel?: T;
        embeddingDimensions?: T;
        similarityThreshold?: T;
      };
  usage?:
    | T
    | {
        retrievalCount?: T;
        lastRetrieved?: T;
        avgSimilarityScore?: T;
        userFeedback?:
          | T
          | {
              userId?: T;
              rating?: T;
              comment?: T;
              timestamp?: T;
              id?: T;
            };
      };
  metadata?:
    | T
    | {
        sourceUrl?: T;
        tags?:
          | T
          | {
              tag?: T;
              id?: T;
            };
        language?: T;
        contentLength?: T;
        wordCount?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "embedding-operations_select".
 */
export interface EmbeddingOperationsSelect<T extends boolean = true> {
  operationType?: T;
  status?: T;
  startedAt?: T;
  completedAt?: T;
  progress?:
    | T
    | {
        totalItems?: T;
        processedItems?: T;
        failedItems?: T;
        percentage?: T;
      };
  configuration?:
    | T
    | {
        embeddingModel?: T;
        batchSize?: T;
        maxRetries?: T;
        timeout?: T;
      };
  targetContent?:
    | T
    | {
        contentType?: T;
        contentIds?:
          | T
          | {
              id?: T;
            };
        filters?: T;
      };
  results?:
    | T
    | {
        successfulOperations?:
          | T
          | {
              contentId?: T;
              vectorId?: T;
              processingTime?: T;
              id?: T;
            };
        failedOperations?:
          | T
          | {
              contentId?: T;
              error?: T;
              attemptCount?: T;
              id?: T;
            };
        performanceMetrics?: T;
      };
  logs?:
    | T
    | {
        timestamp?: T;
        level?: T;
        message?: T;
        details?: T;
        id?: T;
      };
  initiatedBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "database-operations_select".
 */
export interface DatabaseOperationsSelect<T extends boolean = true> {
  operationType?: T;
  status?: T;
  sqlQuery?: T;
  parameters?: T;
  executedAt?: T;
  completedAt?: T;
  duration?: T;
  results?:
    | T
    | {
        rowsAffected?: T;
        resultData?: T;
        performanceMetrics?: T;
      };
  error?:
    | T
    | {
        errorCode?: T;
        errorMessage?: T;
        stackTrace?: T;
      };
  metadata?:
    | T
    | {
        database?: T;
        table?: T;
        operationSource?: T;
        requestId?: T;
        sessionId?: T;
      };
  executedBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "audit-logs_select".
 */
export interface AuditLogsSelect<T extends boolean = true> {
  action?: T;
  user?: T;
  resource?:
    | T
    | {
        type?: T;
        id?: T;
        title?: T;
      };
  details?:
    | T
    | {
        changes?: T;
        reason?: T;
        metadata?: T;
      };
  request?:
    | T
    | {
        ip?: T;
        userAgent?: T;
        method?: T;
        endpoint?: T;
        sessionId?: T;
      };
  severity?: T;
  status?: T;
  timestamp?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        categoryID?: T;
        title?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}